{"ast":null,"code":"var _jsxFileName = \"D:\\\\FSD\\\\ReactJS\\\\memory-card\\\\src\\\\Game\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n//GameBoard.js \n\nimport React from \"react\";\nimport Data from \"./Data\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameBoard() {\n  _s();\n  const [cardsArray, setCardsArray] = React.useState([]);\n  const [moves, setMoves] = React.useState(0);\n  const [firstCard, setFirstCard] = React.useState(null);\n  const [secondCard, setSecondCard] = React.useState(null);\n  const [stopFlip, setStopFlip] = React.useState(false);\n  const [won, setWon] = React.useState(0);\n\n  //this function start new Game \n  function NewGame() {\n    setTimeout(() => {\n      const randomOrderArray = Data.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setMoves(0);\n      setFirstCard(null);\n      setSecondCard(null);\n      setWon(0);\n    }, 1200);\n  }\n\n  //this function helps in storing the firstCard and secondCard value \n  function handleSelectedCards(item) {\n    console.log(typeof item);\n    if (firstCard !== null && firstCard.id !== item.id) {\n      setSecondCard(item);\n    } else {\n      setFirstCard(item);\n    }\n  }\n\n  // if two have been selected then we check if the images are same or not, \n  //if they are same then we stop the flipping ability \n  // else we turn them back \n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      setStopFlip(true);\n      if (firstCard.name === secondCard.name) {\n        setCardsArray(prevArray => {\n          return prevArray.map(unit => {\n            if (unit.name === firstCard.name) {\n              return {\n                ...unit,\n                matched: true\n              };\n            } else {\n              return unit;\n            }\n          });\n        });\n        setWon(preVal => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n\n  //after the slected images have been checked for \n  //equivalency we empty the firstCard and secondCard component \n  function removeSelection() {\n    setFirstCard(null);\n    setSecondCard(null);\n    setStopFlip(false);\n    setMoves(prevValue => prevValue + 1);\n  }\n\n  //starts the game for the first time. \n  React.useEffect(() => {\n    NewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children:\n      // cards component help in coverting the \n      // data from array to visible data for screen \n      cardsArray.map(item => /*#__PURE__*/_jsxDEV(Card, {\n        item: item,\n        handleSelectedCards: handleSelectedCards,\n        toggled: item === firstCard || item === secondCard || item.matched === true,\n        stopflip: stopFlip\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), won !== 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [\"Moves : \", moves]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [\"???????? You Won in \", moves, \" moves ????????\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: NewGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this);\n}\n_s(GameBoard, \"I4tC8ZZCT0/euHDBfPZow7c0MwM=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","Data","Card","jsxDEV","_jsxDEV","GameBoard","_s","cardsArray","setCardsArray","useState","moves","setMoves","firstCard","setFirstCard","secondCard","setSecondCard","stopFlip","setStopFlip","won","setWon","NewGame","setTimeout","randomOrderArray","sort","Math","random","handleSelectedCards","item","console","log","id","useEffect","name","prevArray","map","unit","matched","preVal","removeSelection","prevValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toggled","stopflip","onClick","_c","$RefreshReg$"],"sources":["D:/FSD/ReactJS/memory-card/src/Game/GameBoard.js"],"sourcesContent":["//GameBoard.js \r\n\r\nimport React from \"react\"; \r\nimport Data from \"./Data\"; \r\nimport Card from \"./Card\"; \r\nfunction GameBoard() { \r\n\tconst [cardsArray, setCardsArray] = React.useState([]); \r\n\tconst [moves, setMoves] = React.useState(0); \r\n\tconst [firstCard, setFirstCard] = React.useState(null); \r\n\tconst [secondCard, setSecondCard] = React.useState(null); \r\n\tconst [stopFlip, setStopFlip] = React.useState(false); \r\n\tconst [won, setWon] = React.useState(0); \r\n\r\n\t//this function start new Game \r\n\tfunction NewGame() { \r\n\t\tsetTimeout(() => { \r\n\t\t\tconst randomOrderArray = Data.sort(() => 0.5 - Math.random()); \r\n\t\t\tsetCardsArray(randomOrderArray); \r\n\t\t\tsetMoves(0); \r\n\t\t\tsetFirstCard(null); \r\n\t\t\tsetSecondCard(null); \r\n\t\t\tsetWon(0); \r\n\t\t}, 1200); \r\n\t} \r\n\r\n\t//this function helps in storing the firstCard and secondCard value \r\n\tfunction handleSelectedCards(item) { \r\n\t\tconsole.log(typeof item); \r\n\t\tif (firstCard !== null && firstCard.id !== item.id) { \r\n\t\t\tsetSecondCard(item); \r\n\t\t} else { \r\n\t\t\tsetFirstCard(item); \r\n\t\t} \r\n\t} \r\n\r\n\t// if two have been selected then we check if the images are same or not, \r\n\t//if they are same then we stop the flipping ability \r\n\t// else we turn them back \r\n\tReact.useEffect(() => { \r\n\t\tif (firstCard && secondCard) { \r\n\t\t\tsetStopFlip(true); \r\n\t\t\tif (firstCard.name === secondCard.name) { \r\n\t\t\t\tsetCardsArray((prevArray) => { \r\n\t\t\t\t\treturn prevArray.map((unit) => { \r\n\t\t\t\t\t\tif (unit.name === firstCard.name) { \r\n\t\t\t\t\t\t\treturn { ...unit, matched: true }; \r\n\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\treturn unit; \r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}); \r\n\t\t\t\t}); \r\n\t\t\t\tsetWon((preVal) => preVal + 1); \r\n\t\t\t\tremoveSelection(); \r\n\t\t\t} else { \r\n\t\t\t\tsetTimeout(() => { \r\n\t\t\t\t\tremoveSelection(); \r\n\t\t\t\t}, 1000); \r\n\t\t\t} \r\n\t\t} \r\n\t}, [firstCard, secondCard]); \r\n\r\n\t//after the slected images have been checked for \r\n\t//equivalency we empty the firstCard and secondCard component \r\n\tfunction removeSelection() { \r\n\t\tsetFirstCard(null); \r\n\t\tsetSecondCard(null); \r\n\t\tsetStopFlip(false); \r\n\t\tsetMoves((prevValue) => prevValue + 1); \r\n\t} \r\n\r\n\t//starts the game for the first time. \r\n\tReact.useEffect(() => { \r\n\t\tNewGame(); \r\n\t}, []); \r\n\r\n\treturn ( \r\n\t\t<div className=\"container\"> \r\n\t\t\t<div className=\"header\"> \r\n\t\t\t\t<h1>Memory Game</h1> \r\n\t\t\t</div> \r\n\t\t\t<div className=\"board\"> \r\n\t\t\t\t{ \r\n\t\t\t\t\t// cards component help in coverting the \r\n\t\t\t\t\t// data from array to visible data for screen \r\n\t\t\t\t\tcardsArray.map((item) => ( \r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\titem={item} \r\n\t\t\t\t\t\t\tkey={item.id} \r\n\t\t\t\t\t\t\thandleSelectedCards={handleSelectedCards} \r\n\t\t\t\t\t\t\ttoggled={ \r\n\t\t\t\t\t\t\t\titem === firstCard || \r\n\t\t\t\t\t\t\t\titem === secondCard || \r\n\t\t\t\t\t\t\t\titem.matched === true\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\tstopflip={stopFlip} \r\n\t\t\t\t\t\t/> \r\n\t\t\t\t\t)) \r\n\t\t\t\t} \r\n\t\t\t</div> \r\n\r\n\t\t\t{won !== 6 ? ( \r\n\t\t\t\t<div className=\"comments\">Moves : {moves}</div> \r\n\t\t\t) : ( \r\n\t\t\t\t<div className=\"comments\"> \r\n\t\t\t\t\t???????? You Won in {moves} moves ???????? \r\n\t\t\t\t</div> \r\n\t\t\t)} \r\n\t\t\t<button className=\"button\" onClick={NewGame}> \r\n\t\t\t\tNew Game \r\n\t\t\t</button> \r\n\t\t</div> \r\n\t); \r\n} \r\n\r\nexport default GameBoard; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}